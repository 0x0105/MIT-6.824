package main

import (
	"fmt"
	"mapreduce"
	"os"
	"unicode"
	"strings"
	"strconv"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
// 对于每个输入，map 函数被调用一次
// key是被传输的文件的名字和内容，返回值是key/value的切片

func split(s rune) bool {
	if unicode.IsLetter(s) {
		return false
	}
	return true
}
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	res = make([]mapreduce.KeyValue,0)
	splited := strings.FieldsFunc(value,split)
	for _, v := range splited {
		res = append(res,mapreduce.KeyValue{v,"*"})
		// 对于每个单词，都 存入 { v : "*" }
		// 这里不去重
	}
	return
	// TODO: you have to write this function
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
// 对每个key都执行一次 reduce函数，对于一系列key的value，返回值是一个单个对于这个key的输出值
func reduceF(key string, values []string) string {
	// TODO: you also have to write this function
	num := len(values)
	// 统计次数,这是总次数
	// values的长度就是 单词的次数
	return strconv.Itoa(num)
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
