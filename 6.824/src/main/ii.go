package main

import "os"
import "fmt"
import (
	"mapreduce"
	"unicode"
	"strings"
	"strconv"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
// map函数对于每一片的输入都调用一次
// key是正在被处理的文件的名字，value是文件的内容。
// 返回值是键值对的切片，每一个由KeyValue组成。

func split(s rune) bool {
	if unicode.IsLetter(s) {
		return false
	}
	return true
}
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	// TODO: you should complete this to do the inverted index challenge
	res = make([]mapreduce.KeyValue,0)
	splited := strings.FieldsFunc(value,split)
	for _, v := range splited {
		res = append(res,mapreduce.KeyValue{v,document})
	}
	return
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
// reduce函数对于每一个由map函数生成的key调用一次，和这个key对应的值（是所有输入的合并）
// 返回值应该是对于每一个key对应的输出。
func reduceF(key string, values []string) string {
	// TODO: you should complete this to do the inverted index challeng
	// 首先应该去重
	set := []string{}
	setmap := map[string]bool{}
	for _, v := range values {
		if _, ok := setmap[v]; !ok {
			set = append(set,v)
			setmap[v] = true
		}
	}
	res := strings.Join(set,",")
	res = strconv.Itoa(len(set)) + " " + res
	return res
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
